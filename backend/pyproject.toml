[project]
name = "perfect10k-backend"
version = "1.0.0"
description = "Intelligent route planner with AI-powered semantic place matching"
authors = [
    {name = "Perfect10k Team", email = "contact@perfect10k.com"}
]
# readme = {file = "README.md", content-type = "text/markdown"}
license = {text = "MIT"}
requires-python = ">=3.10"
keywords = ["route-planning", "ai", "semantic-search", "walking", "optimization"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]

dependencies = [
    # Core Web Framework
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Database
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.0",
    "psycopg2-binary>=2.9.9",
    "redis>=5.0.1",
    
    # Authentication & Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    
    # Geospatial & Route Planning
    "osmnx>=1.7.1",
    "networkx>=3.2.1",
    "geopandas>=0.14.1",
    "haversine>=2.8.0",
    "shapely>=2.0.2",
    
    # Machine Learning & Embeddings
    "sentence-transformers>=2.2.2",
    "numpy>=1.24.4",
    "scipy>=1.11.4",
    "scikit-learn>=1.3.2",
    
    # Data Processing
    "pandas>=2.1.4",
    "requests>=2.31.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "python-json-logger>=2.0.7",
    "httpx>=0.25.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "black>=23.11.0",
    "isort>=5.12.0",
    "mypy>=1.7.1",
    "ruff>=0.1.0",
    "pre-commit>=3.5.0",
]

test = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.2",
]

production = [
    "gunicorn>=21.2.0",
]

elevation = [
    "rasterio>=1.3.9",
]

full = [
    "perfect10k-backend[elevation]",
]

[project.urls]
Homepage = "https://github.com/perfect10k/perfect10k"
Documentation = "https://docs.perfect10k.com"
Repository = "https://github.com/perfect10k/perfect10k.git"
"Bug Tracker" = "https://github.com/perfect10k/perfect10k/issues"

[project.scripts]
perfect10k = "run:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "core/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["backend"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | alembic
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"alembic/**/*.py" = ["F401", "F403"]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true

[[tool.mypy.overrides]]
module = [
    "osmnx.*",
    "networkx.*",
    "geopandas.*",
    "rasterio.*",
    "shapely.*",
    "sentence_transformers.*",
    "sklearn.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["backend"]
omit = [
    "*/tests/*",
    "*/alembic/*",
    "*/scripts/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]